{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/khan/code/react-c-g-u/s14-redux/s14-redux-counter/src/containers/Counter/Counter.js\";\nimport React, { Component } from \"react\";\nimport CounterControl from \"../../components/CounterControl/CounterControl\";\nimport CounterOutput from \"../../components/CounterOutput/CounterOutput\";\nimport * as actionTypes from \"../../store/actions\"; //!Connecting the Store to React - use react-redux to create the subscription\n\nimport { connect } from \"react-redux\"; //? connect is not really a higher order component, it's a function which returns a higher order component that we use on the export,\n\nclass Counter extends Component {\n  //*no need after redux\n  //   state = {\n  //     counter: 0,\n  //   };\n  //*no need after redux\n  //   counterChangedHandler = (action, value) => {\n  //     switch (action) {\n  //       case \"inc\":\n  //         this.setState((prevState) => {\n  //           return { counter: prevState.counter + 1 };\n  //         });\n  //         break;\n  //       case \"dec\":\n  //         this.setState((prevState) => {\n  //           return { counter: prevState.counter - 1 };\n  //         });\n  //         break;\n  //       case \"add\":\n  //         this.setState((prevState) => {\n  //           return { counter: prevState.counter + value };\n  //         });\n  //         break;\n  //       case \"sub\":\n  //         this.setState((prevState) => {\n  //           return { counter: prevState.counter - value };\n  //         });\n  //         break;\n  //       default:\n  //         console.log(`default: ${action}`);\n  //     }\n  //   };\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CounterOutput, {\n        value: this.props.ctr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CounterControl, {\n        label: \"Increment\" //? Redux Dispatch action\n        ,\n        clicked: this.props.onIncrementCounter // clicked={() => this.counterChangedHandler(\"inc\")}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CounterControl, {\n        label: \"Decrement\" //? Redux Dispatch action\n        ,\n        clicked: this.props.onDecrementCounter //   clicked={() => this.counterChangedHandler(\"dec\")}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CounterControl, {\n        label: \"Add 10\" //? Redux Dispatch action\n        ,\n        clicked: this.props.onAddCounter //   clicked={() => this.counterChangedHandler(\"add\", 5)}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CounterControl, {\n        label: \"Subtract 5\" //? Redux Dispatch action\n        ,\n        clicked: this.props.onSubtractCounter //   clicked={() => this.counterChangedHandler(\"sub\", 5)}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.props.onStoreResult(this.props.ctr),\n        children: \"Store Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.props.storedResults.map(strResult => /*#__PURE__*/_jsxDEV(\"li\", {\n          //   ! Updating State Immutably\n          onClick: () => this.props.onDeleteResult(strResult.id),\n          children: strResult.value\n        }, strResult.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this) // ! Updating State Immutably\n        // if I click one of these results, so one of these list items, I want to remove it from the array,\n        )\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n} //to this first function execution, we can pass some configuration for this given container.\n//2 pieces of info:\n//? 1st: Witch state I want to set - Which part of the whole application state is interesting to us - define which slice of the state do I want to get in this container\n//? 2nd: the actions I want to dispatch - which actions do I want to dispatch -\n//the state managed redux is not received as state here because state is the thing you change internally from within a component.\n//we don't want to get anything which we can't change internally and props aren't changed internally,\n//* You store instructions about how the state managed by redux should be mapped to props\n\n\nconst mapStateToProps = state => {\n  //! volta -  (state) will be given to you by react-redux\n  //!  react-redux will reach out to your redux state, each it is the state I set on store/reducer.js\n  //function which expects the state stored in redux as the input and returns a javascript object which is a map of prop names and slices of the state stored in redux.\n  return {\n    //ctr for counter\n    ctr: state.counter,\n    //give me the value of the counter in our global state managed by redux\n    // ! Updating State Immutably\n    storedResults: state.results\n  };\n}; //this function will eventually be executed by the react-redux package because we will pass it to it,\n//! dispatch actions from within our components.\n//*the react-redux package gives us a helper function which will call dispatch on the store behind the scenes.\n// equivalent to store.dispatch() on redux stand alone\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //? change action types\n    onIncrementCounter: () => dispatch({\n      type: actionTypes.INCREMENT\n    }),\n    //{ type: \"INCREMENT\" }),\n    //return a javascript object where we can define some prop names which will hold a reference to a function which should eventually get executed to dispatch an action.\n    //onIncrementCounter - this property now holds a value of course and that value should be an anonymous function\n    //*this function dispatch() will be available through this property onIncrementCounter, and therefore, whenever this property is executed as a function, the dispatch method wil be executed.\n    //dispatch({ type: \"INCREMENT\" }), You pass a JS Object where you need to set up a type/\n    onDecrementCounter: () => dispatch({\n      type: actionTypes.DECREMENT\n    }),\n    //! Passing and Retrieving Data with Action\n    onAddCounter: () => dispatch({\n      type: actionTypes.ADD,\n      payload: 10\n    }),\n    onSubtractCounter: () => dispatch({\n      type: actionTypes.SUBTRACT,\n      payload: 5\n    }),\n    //! Updating State Immutably\n    // if I click one of these results, so one of these list items, I want to remove it from the array,\n    onStoreResult: result => dispatch({\n      type: actionTypes.STORE_RESULT,\n      result: result\n    }),\n    onDeleteResult: id => dispatch({\n      type: actionTypes.DELETE_RESULT,\n      resultElId: id\n    })\n  };\n}; //?connect itself is a function which returns a function which takes then a component as input,\n//connect is not really a higher order component, it's a function which returns a higher order component.\n//! so this doesn't work export default connect(Counter);\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter); //*if you have a container which only needs to dispatch actions but doesn't need a slice of the state\n// export default connect(null, mapDispatchToProps)(Counter);\n//*case where you don't have any actions in your container, you just leave it out\n// export default connect(mapStateToProps)(Counter);","map":{"version":3,"sources":["/home/khan/code/react-c-g-u/s14-redux/s14-redux-counter/src/containers/Counter/Counter.js"],"names":["React","Component","CounterControl","CounterOutput","actionTypes","connect","Counter","render","props","ctr","onIncrementCounter","onDecrementCounter","onAddCounter","onSubtractCounter","onStoreResult","storedResults","map","strResult","onDeleteResult","id","value","mapStateToProps","state","counter","results","mapDispatchToProps","dispatch","type","INCREMENT","DECREMENT","ADD","payload","SUBTRACT","result","STORE_RESULT","DELETE_RESULT","resultElId"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,cAAP,MAA2B,gDAA3B;AACA,OAAOC,aAAP,MAA0B,8CAA1B;AACA,OAAO,KAAKC,WAAZ,MAA6B,qBAA7B,C,CAEA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AAEA,MAAMC,OAAN,SAAsBL,SAAtB,CAAgC;AAC9B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAM,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BAGE,QAAC,aAAD;AAAe,QAAA,KAAK,EAAE,KAAKC,KAAL,CAAWC;AAAjC;AAAA;AAAA;AAAA;AAAA,cAHF,eAKE,QAAC,cAAD;AACE,QAAA,KAAK,EAAC,WADR,CAEE;AAFF;AAGE,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWE,kBAHtB,CAIE;;AAJF;AAAA;AAAA;AAAA;AAAA,cALF,eAWE,QAAC,cAAD;AACE,QAAA,KAAK,EAAC,WADR,CAEE;AAFF;AAGE,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAWG,kBAHtB,CAIE;;AAJF;AAAA;AAAA;AAAA;AAAA,cAXF,eAiBE,QAAC,cAAD;AACE,QAAA,KAAK,EAAC,QADR,CAEE;AAFF;AAGE,QAAA,OAAO,EAAE,KAAKH,KAAL,CAAWI,YAHtB,CAIE;;AAJF;AAAA;AAAA;AAAA;AAAA,cAjBF,eAuBE,QAAC,cAAD;AACE,QAAA,KAAK,EAAC,YADR,CAEE;AAFF;AAGE,QAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWK,iBAHtB,CAIE;;AAJF;AAAA;AAAA;AAAA;AAAA,cAvBF,eA+BE;AAAA;AAAA;AAAA;AAAA,cA/BF,eAmCE;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKL,KAAL,CAAWM,aAAX,CAAyB,KAAKN,KAAL,CAAWC,GAApC,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnCF,eAsCE;AAAA,kBAEG,KAAKD,KAAL,CAAWO,aAAX,CAAyBC,GAAzB,CAA8BC,SAAD,iBAC5B;AAEE;AACA,UAAA,OAAO,EAAE,MAAM,KAAKT,KAAL,CAAWU,cAAX,CAA0BD,SAAS,CAACE,EAApC,CAHjB;AAAA,oBAKGF,SAAS,CAACG;AALb,WACOH,SAAS,CAACE,EADjB;AAAA;AAAA;AAAA;AAAA,gBAD4B,CAS5B;AACA;AAVD;AAFH;AAAA;AAAA;AAAA;AAAA,cAtCF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAwDD;;AA3F6B,C,CA8FhC;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA,MAAME,eAAe,GAAIC,KAAD,IAAW;AACjC;AACA;AACA;AACA,SAAO;AACL;AACAb,IAAAA,GAAG,EAAEa,KAAK,CAACC,OAFN;AAEe;AACpB;AACAR,IAAAA,aAAa,EAAEO,KAAK,CAACE;AAJhB,GAAP;AAMD,CAVD,C,CAWA;AAEA;AACA;AACA;;;AACA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACL;AACAhB,IAAAA,kBAAkB,EAAE,MAAMgB,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEvB,WAAW,CAACwB;AAApB,KAAD,CAF7B;AAE+D;AACpE;AACA;AACA;AACA;AAEAjB,IAAAA,kBAAkB,EAAE,MAAMe,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEvB,WAAW,CAACyB;AAApB,KAAD,CAR7B;AASL;AACAjB,IAAAA,YAAY,EAAE,MAAMc,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEvB,WAAW,CAAC0B,GAApB;AAAyBC,MAAAA,OAAO,EAAE;AAAlC,KAAD,CAVvB;AAWLlB,IAAAA,iBAAiB,EAAE,MAAMa,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEvB,WAAW,CAAC4B,QAApB;AAA8BD,MAAAA,OAAO,EAAE;AAAvC,KAAD,CAX5B;AAaL;AACA;AACAjB,IAAAA,aAAa,EAAGmB,MAAD,IACbP,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEvB,WAAW,CAAC8B,YAApB;AAAkCD,MAAAA,MAAM,EAAEA;AAA1C,KAAD,CAhBL;AAiBLf,IAAAA,cAAc,EAAGC,EAAD,IAAQO,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEvB,WAAW,CAAC+B,aAApB;AAAmCC,MAAAA,UAAU,EAAEjB;AAA/C,KAAD;AAjB3B,GAAP;AAmBD,CApBD,C,CAsBA;AACA;AACA;;;AACA,eAAed,OAAO,CAACgB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CnB,OAA7C,CAAf,C,CAEA;AACA;AAEA;AACA","sourcesContent":["import React, { Component } from \"react\";\n\nimport CounterControl from \"../../components/CounterControl/CounterControl\";\nimport CounterOutput from \"../../components/CounterOutput/CounterOutput\";\nimport * as actionTypes from \"../../store/actions\"\n\n//!Connecting the Store to React - use react-redux to create the subscription\nimport { connect } from \"react-redux\";\n//? connect is not really a higher order component, it's a function which returns a higher order component that we use on the export,\n\nclass Counter extends Component {\n  //*no need after redux\n  //   state = {\n  //     counter: 0,\n  //   };\n\n  //*no need after redux\n  //   counterChangedHandler = (action, value) => {\n  //     switch (action) {\n  //       case \"inc\":\n  //         this.setState((prevState) => {\n  //           return { counter: prevState.counter + 1 };\n  //         });\n  //         break;\n  //       case \"dec\":\n  //         this.setState((prevState) => {\n  //           return { counter: prevState.counter - 1 };\n  //         });\n  //         break;\n  //       case \"add\":\n  //         this.setState((prevState) => {\n  //           return { counter: prevState.counter + value };\n  //         });\n  //         break;\n  //       case \"sub\":\n  //         this.setState((prevState) => {\n  //           return { counter: prevState.counter - value };\n  //         });\n  //         break;\n  //       default:\n  //         console.log(`default: ${action}`);\n  //     }\n  //   };\n\n  render() {\n    return (\n      <div>\n        {/* <CounterOutput value={this.state.counter} /> */}\n        {/* Version with redux */}\n        <CounterOutput value={this.props.ctr} />\n\n        <CounterControl\n          label=\"Increment\"\n          //? Redux Dispatch action\n          clicked={this.props.onIncrementCounter}\n          // clicked={() => this.counterChangedHandler(\"inc\")}\n        />\n        <CounterControl\n          label=\"Decrement\"\n          //? Redux Dispatch action\n          clicked={this.props.onDecrementCounter}\n          //   clicked={() => this.counterChangedHandler(\"dec\")}\n        />\n        <CounterControl\n          label=\"Add 10\"\n          //? Redux Dispatch action\n          clicked={this.props.onAddCounter}\n          //   clicked={() => this.counterChangedHandler(\"add\", 5)}\n        />\n        <CounterControl\n          label=\"Subtract 5\"\n          //? Redux Dispatch action\n          clicked={this.props.onSubtractCounter}\n          //   clicked={() => this.counterChangedHandler(\"sub\", 5)}\n        />\n\n        {/* //updating state immutably */}\n        <hr />\n        {/*            // ! Updating State Immutably\n When you click on Store Result - add the current counter value to my result array in the reducer \n you can dispatch actions which you actually don't handle in the reducer - you don't get a error because of it*/}\n        <button onClick={() => this.props.onStoreResult(this.props.ctr)}>\n          Store Result\n        </button>\n        <ul>\n          {/* //! Updating State Immutably */}\n          {this.props.storedResults.map((strResult) => (\n            <li\n              key={strResult.id}\n              //   ! Updating State Immutably\n              onClick={() => this.props.onDeleteResult(strResult.id)}\n            >\n              {strResult.value}\n            </li>\n\n            // ! Updating State Immutably\n            // if I click one of these results, so one of these list items, I want to remove it from the array,\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\n//to this first function execution, we can pass some configuration for this given container.\n//2 pieces of info:\n//? 1st: Witch state I want to set - Which part of the whole application state is interesting to us - define which slice of the state do I want to get in this container\n//? 2nd: the actions I want to dispatch - which actions do I want to dispatch -\n\n//the state managed redux is not received as state here because state is the thing you change internally from within a component.\n//we don't want to get anything which we can't change internally and props aren't changed internally,\n//* You store instructions about how the state managed by redux should be mapped to props\nconst mapStateToProps = (state) => {\n  //! volta -  (state) will be given to you by react-redux\n  //!  react-redux will reach out to your redux state, each it is the state I set on store/reducer.js\n  //function which expects the state stored in redux as the input and returns a javascript object which is a map of prop names and slices of the state stored in redux.\n  return {\n    //ctr for counter\n    ctr: state.counter, //give me the value of the counter in our global state managed by redux\n    // ! Updating State Immutably\n    storedResults: state.results,\n  };\n};\n//this function will eventually be executed by the react-redux package because we will pass it to it,\n\n//! dispatch actions from within our components.\n//*the react-redux package gives us a helper function which will call dispatch on the store behind the scenes.\n// equivalent to store.dispatch() on redux stand alone\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    //? change action types\n    onIncrementCounter: () => dispatch({ type: actionTypes.INCREMENT }),//{ type: \"INCREMENT\" }),\n    //return a javascript object where we can define some prop names which will hold a reference to a function which should eventually get executed to dispatch an action.\n    //onIncrementCounter - this property now holds a value of course and that value should be an anonymous function\n    //*this function dispatch() will be available through this property onIncrementCounter, and therefore, whenever this property is executed as a function, the dispatch method wil be executed.\n    //dispatch({ type: \"INCREMENT\" }), You pass a JS Object where you need to set up a type/\n\n    onDecrementCounter: () => dispatch({ type: actionTypes.DECREMENT }),\n    //! Passing and Retrieving Data with Action\n    onAddCounter: () => dispatch({ type: actionTypes.ADD, payload: 10 }),\n    onSubtractCounter: () => dispatch({ type: actionTypes.SUBTRACT, payload: 5 }),\n\n    //! Updating State Immutably\n    // if I click one of these results, so one of these list items, I want to remove it from the array,\n    onStoreResult: (result) =>\n      dispatch({ type: actionTypes.STORE_RESULT, result: result }),\n    onDeleteResult: (id) => dispatch({ type: actionTypes.DELETE_RESULT, resultElId: id }),\n  };\n};\n\n//?connect itself is a function which returns a function which takes then a component as input,\n//connect is not really a higher order component, it's a function which returns a higher order component.\n//! so this doesn't work export default connect(Counter);\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n\n//*if you have a container which only needs to dispatch actions but doesn't need a slice of the state\n// export default connect(null, mapDispatchToProps)(Counter);\n\n//*case where you don't have any actions in your container, you just leave it out\n// export default connect(mapStateToProps)(Counter);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/khan/code/react-c-g-u/s14-redux/s14-redux-counter/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\"; // import reducer from \"./store/reducer\";\n\nimport counterReducer from \"./store/reducers/counter\";\nimport resultReducer from \"./store/reducers/result\"; //!a special package because redux alone is standalone, it is not connected to react.\n//*allows us to hook up our redux store to our react application.\n\nimport { Provider } from \"react-redux\"; //allows us to kind of inject our store into the react components\n//! Connecting Store to Reducer\n//!Redux - This store should be created right before our application or when our application starts\n\nimport { createStore, combineReducers } from \"redux\"; //! combineReducers: helper function to combine reducers\n//a function which takes a javascript object mapping our reducers to different slices of our state as input and merges everything into one state and one reducer\n//! How to combine reducers:\n\nconst rootReducer = combineReducers({\n  ctr: counterReducer,\n  res: resultReducer\n}); //Then before mounting the app, I'll create the store and store it in a constant named store\n\nconst store = createStore(rootReducer);\n\nconst app =\n/*#__PURE__*/\n//For hooking up the provider component with our store - set up special property\n_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 30,\n  columnNumber: 3\n}, this);\n\nReactDOM.render(app, document.getElementById(\"root\"));\nregisterServiceWorker();","map":{"version":3,"sources":["/home/khan/code/react-c-g-u/s14-redux/s14-redux-counter/src/index.js"],"names":["React","ReactDOM","App","registerServiceWorker","counterReducer","resultReducer","Provider","createStore","combineReducers","rootReducer","ctr","res","store","app","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC,C,CACA;;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,aAAP,MAA0B,yBAA1B,C,CAEA;AACA;;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CAAwC;AAExC;AAEA;;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C,C,CACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAGD,eAAe,CAAC;AAClCE,EAAAA,GAAG,EAAEN,cAD6B;AAElCO,EAAAA,GAAG,EAAEN;AAF6B,CAAD,CAAnC,C,CAKA;;AACA,MAAMO,KAAK,GAAGL,WAAW,CAACE,WAAD,CAAzB;;AACA,MAAMI,GAAG;AAAA;AACP;AACA,QAAC,QAAD;AAAU,EAAA,KAAK,EAAED,KAAjB;AAAA,yBAEE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,QAFF;;AAOAX,QAAQ,CAACa,MAAT,CAAgBD,GAAhB,EAAqBE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAArB;AACAb,qBAAqB","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n// import reducer from \"./store/reducer\";\nimport counterReducer from \"./store/reducers/counter\";\nimport resultReducer from \"./store/reducers/result\";\n\n//!a special package because redux alone is standalone, it is not connected to react.\n//*allows us to hook up our redux store to our react application.\nimport { Provider } from \"react-redux\"; //allows us to kind of inject our store into the react components\n\n//! Connecting Store to Reducer\n\n//!Redux - This store should be created right before our application or when our application starts\nimport { createStore, combineReducers } from \"redux\";\n//! combineReducers: helper function to combine reducers\n//a function which takes a javascript object mapping our reducers to different slices of our state as input and merges everything into one state and one reducer\n//! How to combine reducers:\nconst rootReducer = combineReducers({\n  ctr: counterReducer,\n  res: resultReducer,\n});\n\n//Then before mounting the app, I'll create the store and store it in a constant named store\nconst store = createStore(rootReducer);\nconst app = (\n  //For hooking up the provider component with our store - set up special property\n  <Provider store={store}>\n    {/* //wrap our app component with provider */}\n    <App />\n  </Provider>\n);\nReactDOM.render(app, document.getElementById(\"root\"));\nregisterServiceWorker();\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/khan/code/react-c-g-u/s14-redux/s14-redux-counter/src/containers/Counter/Counter.js\";\nimport React, { Component } from \"react\";\nimport CounterControl from \"../../components/CounterControl/CounterControl\";\nimport CounterOutput from \"../../components/CounterOutput/CounterOutput\"; //!Connecting the Store to React - use react-redux to create the subscription\n\nimport { connect } from \"react-redux\"; //? connect is not really a higher order component, it's a function which returns a higher order component that we use on the export,\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      counter: 0\n    };\n  }\n\n  //*no need after redux\n  //   counterChangedHandler = (action, value) => {\n  //     switch (action) {\n  //       case \"inc\":\n  //         this.setState((prevState) => {\n  //           return { counter: prevState.counter + 1 };\n  //         });\n  //         break;\n  //       case \"dec\":\n  //         this.setState((prevState) => {\n  //           return { counter: prevState.counter - 1 };\n  //         });\n  //         break;\n  //       case \"add\":\n  //         this.setState((prevState) => {\n  //           return { counter: prevState.counter + value };\n  //         });\n  //         break;\n  //       case \"sub\":\n  //         this.setState((prevState) => {\n  //           return { counter: prevState.counter - value };\n  //         });\n  //         break;\n  //       default:\n  //         console.log(`default: ${action}`);\n  //     }\n  //   };\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CounterOutput, {\n        value: this.props.ctr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CounterControl, {\n        label: \"Increment\" //? Redux Dispatch action\n        ,\n        clicked: this.props.onIncrementCounter // clicked={() => this.counterChangedHandler(\"inc\")}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CounterControl, {\n        label: \"Decrement\" //? Redux Dispatch action\n        ,\n        clicked: this.props.onDecrementCounter //   clicked={() => this.counterChangedHandler(\"dec\")}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CounterControl, {\n        label: \"Add 5\" //? Redux Dispatch action\n        ,\n        clicked: this.props.onAddCounter //   clicked={() => this.counterChangedHandler(\"add\", 5)}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CounterControl, {\n        label: \"Subtract 5\" //? Redux Dispatch action\n        ,\n        clicked: this.props.onSubtractCounter //   clicked={() => this.counterChangedHandler(\"sub\", 5)}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n} //to this first function execution, we can pass some configuration for this given container.\n//2 pieces of info:\n//? 1st: Witch state I want to set - Which part of the whole application state is interesting to us - define which slice of the state do I want to get in this container\n//? 2nd: the actions I want to dispatch - which actions do I want to dispatch -\n//the state managed redux is not received as state here because state is the thing you change internally from within a component.\n//we don't want to get anything which we can't change internally and props aren't changed internally,\n//* You store instructions about how the state managed by redux should be mapped to props\n\n\nconst mapStateToProps = state => {\n  //! volta -  (state) will be given to you by react-redux\n  //!  react-redux will reach out to your redux state, each it is the state I set on store/reducer.js\n  //function which expects the state stored in redux as the input and returns a javascript object which is a map of prop names and slices of the state stored in redux.\n  return {\n    //ctr for counter\n    ctr: state.counter //give me the value of the counter in our global state managed by redux\n\n  };\n}; //this function will eventually be executed by the react-redux package because we will pass it to it,\n//! dispatch actions from within our components.\n//*the react-redux package gives us a helper function which will call dispatch on the store behind the scenes.\n// equivalent to store.dispatch() on redux stand alone\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIncrementCounter: () => dispatch({\n      type: \"INCREMENT\"\n    }),\n    //return a javascript object where we can define some prop names which will hold a reference to a function which should eventually get executed to dispatch an action.\n    //onIncrementCounter - this property now holds a value of course and that value should be an anonymous function\n    //*this function dispatch() will be available through this property onIncrementCounter, and therefore, whenever this property is executed as a function, the dispatch method wil be executed.\n    //dispatch({ type: \"INCREMENT\" }), You pass a JS Object where you need to set up a type/\n    onDecrementCounter: () => dispatch({\n      type: \"DECREMENT\"\n    }),\n    onAddCounter: () => dispatch({\n      type: \"ADD\"\n    }),\n    onSubtractCounter: () => dispatch({\n      type: \"SUBTRACT\"\n    })\n  };\n}; //?connect itself is a function which returns a function which takes then a component as input,\n//connect is not really a higher order component, it's a function which returns a higher order component.\n//! so this doesn't work export default connect(Counter);\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter); //*if you have a container which only needs to dispatch actions but doesn't need a slice of the state\n// export default connect(null, mapDispatchToProps)(Counter);\n//*case where you don't have any actions in your container, you just leave it out\n// export default connect(mapStateToProps)(Counter);","map":{"version":3,"sources":["/home/khan/code/react-c-g-u/s14-redux/s14-redux-counter/src/containers/Counter/Counter.js"],"names":["React","Component","CounterControl","CounterOutput","connect","Counter","state","counter","render","props","ctr","onIncrementCounter","onDecrementCounter","onAddCounter","onSubtractCounter","mapStateToProps","mapDispatchToProps","dispatch","type"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,cAAP,MAA2B,gDAA3B;AACA,OAAOC,aAAP,MAA0B,8CAA1B,C,CAEA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AAEA,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BK,KAD8B,GACtB;AACNC,MAAAA,OAAO,EAAE;AADH,KADsB;AAAA;;AAM9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEEC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BAGE,QAAC,aAAD;AAAe,QAAA,KAAK,EAAE,KAAKC,KAAL,CAAWC;AAAjC;AAAA;AAAA;AAAA;AAAA,cAHF,eAKE,QAAC,cAAD;AACE,QAAA,KAAK,EAAC,WADR,CAEE;AAFF;AAGE,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWE,kBAHtB,CAIE;;AAJF;AAAA;AAAA;AAAA;AAAA,cALF,eAWE,QAAC,cAAD;AACE,QAAA,KAAK,EAAC,WADR,CAEE;AAFF;AAGE,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAWG,kBAHtB,CAIE;;AAJF;AAAA;AAAA;AAAA;AAAA,cAXF,eAiBE,QAAC,cAAD;AACE,QAAA,KAAK,EAAC,OADR,CAEE;AAFF;AAGE,QAAA,OAAO,EAAE,KAAKH,KAAL,CAAWI,YAHtB,CAIE;;AAJF;AAAA;AAAA;AAAA;AAAA,cAjBF,eAuBE,QAAC,cAAD;AACE,QAAA,KAAK,EAAC,YADR,CAEE;AAFF;AAGE,QAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWK,iBAHtB,CAIE;;AAJF;AAAA;AAAA;AAAA;AAAA,cAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgCD;;AAnE6B,C,CAsEhC;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA,MAAMC,eAAe,GAAIT,KAAD,IAAW;AACjC;AACA;AACA;AACA,SAAO;AACL;AACAI,IAAAA,GAAG,EAAEJ,KAAK,CAACC,OAFN,CAEe;;AAFf,GAAP;AAID,CARD,C,CASA;AAEA;AACA;AACA;;;AACA,MAAMS,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLN,IAAAA,kBAAkB,EAAE,MAAMM,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAD7B;AAEL;AACA;AACA;AACA;AAEAN,IAAAA,kBAAkB,EAAE,MAAMK,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAP7B;AAQLL,IAAAA,YAAY,EAAE,MAAMI,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CARvB;AASLJ,IAAAA,iBAAiB,EAAE,MAAMG,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD;AAT5B,GAAP;AAWD,CAZD,C,CAcA;AACA;AACA;;;AACA,eAAed,OAAO,CAACW,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CX,OAA7C,CAAf,C,CAEA;AACA;AAEA;AACA","sourcesContent":["import React, { Component } from \"react\";\n\nimport CounterControl from \"../../components/CounterControl/CounterControl\";\nimport CounterOutput from \"../../components/CounterOutput/CounterOutput\";\n\n//!Connecting the Store to React - use react-redux to create the subscription\nimport { connect } from \"react-redux\";\n//? connect is not really a higher order component, it's a function which returns a higher order component that we use on the export,\n\nclass Counter extends Component {\n  state = {\n    counter: 0,\n  };\n\n\n  //*no need after redux\n//   counterChangedHandler = (action, value) => {\n//     switch (action) {\n//       case \"inc\":\n//         this.setState((prevState) => {\n//           return { counter: prevState.counter + 1 };\n//         });\n//         break;\n//       case \"dec\":\n//         this.setState((prevState) => {\n//           return { counter: prevState.counter - 1 };\n//         });\n//         break;\n//       case \"add\":\n//         this.setState((prevState) => {\n//           return { counter: prevState.counter + value };\n//         });\n//         break;\n//       case \"sub\":\n//         this.setState((prevState) => {\n//           return { counter: prevState.counter - value };\n//         });\n//         break;\n//       default:\n//         console.log(`default: ${action}`);\n//     }\n//   };\n\n  render() {\n    return (\n      <div>\n        {/* <CounterOutput value={this.state.counter} /> */}\n        {/* Version with redux */}\n        <CounterOutput value={this.props.ctr} />\n\n        <CounterControl\n          label=\"Increment\"\n          //? Redux Dispatch action\n          clicked={this.props.onIncrementCounter}\n          // clicked={() => this.counterChangedHandler(\"inc\")}\n        />\n        <CounterControl\n          label=\"Decrement\"\n          //? Redux Dispatch action\n          clicked={this.props.onDecrementCounter}\n          //   clicked={() => this.counterChangedHandler(\"dec\")}\n        />\n        <CounterControl\n          label=\"Add 5\"\n          //? Redux Dispatch action\n          clicked={this.props.onAddCounter}\n          //   clicked={() => this.counterChangedHandler(\"add\", 5)}\n        />\n        <CounterControl\n          label=\"Subtract 5\"\n          //? Redux Dispatch action\n          clicked={this.props.onSubtractCounter}\n          //   clicked={() => this.counterChangedHandler(\"sub\", 5)}\n        />\n      </div>\n    );\n  }\n}\n\n//to this first function execution, we can pass some configuration for this given container.\n//2 pieces of info:\n//? 1st: Witch state I want to set - Which part of the whole application state is interesting to us - define which slice of the state do I want to get in this container\n//? 2nd: the actions I want to dispatch - which actions do I want to dispatch -\n\n//the state managed redux is not received as state here because state is the thing you change internally from within a component.\n//we don't want to get anything which we can't change internally and props aren't changed internally,\n//* You store instructions about how the state managed by redux should be mapped to props\nconst mapStateToProps = (state) => {\n  //! volta -  (state) will be given to you by react-redux\n  //!  react-redux will reach out to your redux state, each it is the state I set on store/reducer.js\n  //function which expects the state stored in redux as the input and returns a javascript object which is a map of prop names and slices of the state stored in redux.\n  return {\n    //ctr for counter\n    ctr: state.counter, //give me the value of the counter in our global state managed by redux\n  };\n};\n//this function will eventually be executed by the react-redux package because we will pass it to it,\n\n//! dispatch actions from within our components.\n//*the react-redux package gives us a helper function which will call dispatch on the store behind the scenes.\n// equivalent to store.dispatch() on redux stand alone\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onIncrementCounter: () => dispatch({ type: \"INCREMENT\" }),\n    //return a javascript object where we can define some prop names which will hold a reference to a function which should eventually get executed to dispatch an action.\n    //onIncrementCounter - this property now holds a value of course and that value should be an anonymous function\n    //*this function dispatch() will be available through this property onIncrementCounter, and therefore, whenever this property is executed as a function, the dispatch method wil be executed.\n    //dispatch({ type: \"INCREMENT\" }), You pass a JS Object where you need to set up a type/\n\n    onDecrementCounter: () => dispatch({ type: \"DECREMENT\" }),\n    onAddCounter: () => dispatch({ type: \"ADD\" }),\n    onSubtractCounter: () => dispatch({ type: \"SUBTRACT\" }),\n  };\n};\n\n//?connect itself is a function which returns a function which takes then a component as input,\n//connect is not really a higher order component, it's a function which returns a higher order component.\n//! so this doesn't work export default connect(Counter);\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n\n//*if you have a container which only needs to dispatch actions but doesn't need a slice of the state\n// export default connect(null, mapDispatchToProps)(Counter);\n\n//*case where you don't have any actions in your container, you just leave it out\n// export default connect(mapStateToProps)(Counter);\n"]},"metadata":{},"sourceType":"module"}
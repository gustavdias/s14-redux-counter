{"ast":null,"code":"const initialState = {\n  counter: 0,\n  results: [] //updating state immutably\n\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      //since there is return, you don't need to use break\n      return {\n        counter: state.counter + 1\n      };\n\n    case \"DECREMENT\":\n      return {\n        counter: state.counter - 1\n      };\n\n    case \"ADD\":\n      return {\n        counter: state.counter + action.payload\n      };\n\n    case \"SUBTRACT\":\n      return {\n        counter: state.counter - action.payload\n      };\n\n    default:\n      console.log(\"default case\");\n      return state;\n  } //   if (action.type === \"INCREMENT\") {\n  //     return {\n  //       counter: state.counter + 1,\n  //     };\n  //   }\n  //   //DECREMENT\n  //   if (action.type === \"DECREMENT\") {\n  //     return {\n  //       counter: state.counter - 1,\n  //     };\n  //   }\n  //   //ADD\n  //   if (action.type === \"ADD\") {\n  //     return {\n  //       counter: state.counter  + action.payload,\n  //     };\n  //   }\n  //   //SUBTRACT\n  //   if (action.type === \"SUBTRACT\") {\n  //     return {\n  //       counter: state.counter - action.payload,\n  //     };\n  //   }\n  //   return state;\n\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/khan/code/react-c-g-u/s14-redux/s14-redux-counter/src/store/reducer.js"],"names":["initialState","counter","results","reducer","state","action","type","payload","console","log"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,CADU;AAEnBC,EAAAA,OAAO,EAAE,EAFU,CAEN;;AAFM,CAArB;;AAKA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE;AACA,aAAO;AACLL,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgB;AADpB,OAAP;;AAGF,SAAK,WAAL;AACE,aAAO;AACLA,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgB;AADpB,OAAP;;AAIF,SAAK,KAAL;AACE,aAAO;AACLA,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACE;AAD3B,OAAP;;AAGF,SAAK,UAAL;AACE,aAAO;AACLN,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACE;AAD3B,OAAP;;AAGF;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,aAAOL,KAAP;AArBJ,GADgD,CAyBhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACD,CAnDD;;AAqDA,eAAeD,OAAf","sourcesContent":["const initialState = {\n  counter: 0,\n  results: [], //updating state immutably\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      //since there is return, you don't need to use break\n      return {\n        counter: state.counter + 1,\n      };\n    case \"DECREMENT\":\n      return {\n        counter: state.counter - 1,\n      };\n\n    case \"ADD\":\n      return {\n        counter: state.counter + action.payload,\n      };\n    case \"SUBTRACT\":\n      return {\n        counter: state.counter - action.payload,\n      };\n    default:\n      console.log(\"default case\");\n      return state;\n  }\n\n  //   if (action.type === \"INCREMENT\") {\n  //     return {\n  //       counter: state.counter + 1,\n  //     };\n  //   }\n  //   //DECREMENT\n  //   if (action.type === \"DECREMENT\") {\n  //     return {\n  //       counter: state.counter - 1,\n  //     };\n  //   }\n\n  //   //ADD\n  //   if (action.type === \"ADD\") {\n  //     return {\n  //       counter: state.counter  + action.payload,\n  //     };\n  //   }\n  //   //SUBTRACT\n  //   if (action.type === \"SUBTRACT\") {\n  //     return {\n  //       counter: state.counter - action.payload,\n  //     };\n  //   }\n\n  //   return state;\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}
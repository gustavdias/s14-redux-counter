{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/khan/code/react-c-g-u/s14-redux/s14-redux-counter/src/containers/Counter/Counter.js\";\nimport React, { Component } from \"react\";\nimport CounterControl from \"../../components/CounterControl/CounterControl\";\nimport CounterOutput from \"../../components/CounterOutput/CounterOutput\"; //!use react-redux to create the subscription\n\nimport { connect } from \"react-redux\"; //? connect is not really a higher order component, it's a function which returns a higher order component that we use on the export,\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      counter: 0\n    };\n\n    this.counterChangedHandler = (action, value) => {\n      switch (action) {\n        case \"inc\":\n          this.setState(prevState => {\n            return {\n              counter: prevState.counter + 1\n            };\n          });\n          break;\n\n        case \"dec\":\n          this.setState(prevState => {\n            return {\n              counter: prevState.counter - 1\n            };\n          });\n          break;\n\n        case \"add\":\n          this.setState(prevState => {\n            return {\n              counter: prevState.counter + value\n            };\n          });\n          break;\n\n        case \"sub\":\n          this.setState(prevState => {\n            return {\n              counter: prevState.counter - value\n            };\n          });\n          break;\n\n        default:\n          console.log(`default: ${action}`);\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CounterOutput, {\n        value: this.state.counter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CounterControl, {\n        label: \"Increment\",\n        clicked: () => this.counterChangedHandler(\"inc\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CounterControl, {\n        label: \"Decrement\",\n        clicked: () => this.counterChangedHandler(\"dec\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CounterControl, {\n        label: \"Add 5\",\n        clicked: () => this.counterChangedHandler(\"add\", 5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CounterControl, {\n        label: \"Subtract 5\",\n        clicked: () => this.counterChangedHandler(\"sub\", 5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n\n} //to this first function execution, we can pass some configuration for this given container.\n//2 pieces of info:\n//? 1st: Witch state I want to set - Which part of the whole application state is interesting to us - define which slice of the state do I want to get in this container\n//? 2nd: the actions I want to dispatch - which actions do I want to dispatch -\n//the state managed redux is not received as state here because state is the thing you change internally from within a component.\n//we don't want to get anything which we can't change internally and props aren't changed internally,\n//* You store instructions about how the state managed by redux should be mapped to props\n\n\nconst mapStateToProps = state => {\n  //function which expects the state stored in redux as the input and returns a javascript object which is a map of prop names and slices of the state stored in redux.\n  return {\n    ctr: state.counter\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIncrementCounter: () => dispatch({\n      type: \"INCREMENT\"\n    })\n  };\n}; //?connect itself is a function which returns a function which takes then a component as input,\n//connect is not really a higher order component, it's a function which returns a higher order component.\n//! so this doesn't work export default connect(Counter);\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);","map":{"version":3,"sources":["/home/khan/code/react-c-g-u/s14-redux/s14-redux-counter/src/containers/Counter/Counter.js"],"names":["React","Component","CounterControl","CounterOutput","connect","Counter","state","counter","counterChangedHandler","action","value","setState","prevState","console","log","render","mapStateToProps","ctr","mapDispatchToProps","dispatch","onIncrementCounter","type"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,cAAP,MAA2B,gDAA3B;AACA,OAAOC,aAAP,MAA0B,8CAA1B,C,CAEA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AAEA,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BK,KAD8B,GACtB;AACNC,MAAAA,OAAO,EAAE;AADH,KADsB;;AAAA,SAK9BC,qBAL8B,GAKN,CAACC,MAAD,EAASC,KAAT,KAAmB;AACzC,cAAQD,MAAR;AACE,aAAK,KAAL;AACE,eAAKE,QAAL,CAAeC,SAAD,IAAe;AAC3B,mBAAO;AAAEL,cAAAA,OAAO,EAAEK,SAAS,CAACL,OAAV,GAAoB;AAA/B,aAAP;AACD,WAFD;AAGA;;AACF,aAAK,KAAL;AACE,eAAKI,QAAL,CAAeC,SAAD,IAAe;AAC3B,mBAAO;AAAEL,cAAAA,OAAO,EAAEK,SAAS,CAACL,OAAV,GAAoB;AAA/B,aAAP;AACD,WAFD;AAGA;;AACF,aAAK,KAAL;AACE,eAAKI,QAAL,CAAeC,SAAD,IAAe;AAC3B,mBAAO;AAAEL,cAAAA,OAAO,EAAEK,SAAS,CAACL,OAAV,GAAoBG;AAA/B,aAAP;AACD,WAFD;AAGA;;AACF,aAAK,KAAL;AACE,eAAKC,QAAL,CAAeC,SAAD,IAAe;AAC3B,mBAAO;AAAEL,cAAAA,OAAO,EAAEK,SAAS,CAACL,OAAV,GAAoBG;AAA/B,aAAP;AACD,WAFD;AAGA;;AACF;AACEG,UAAAA,OAAO,CAACC,GAAR,CAAa,YAAWL,MAAO,EAA/B;AAtBJ;AAwBD,KA9B6B;AAAA;;AAgC9BM,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,aAAD;AAAe,QAAA,KAAK,EAAE,KAAKT,KAAL,CAAWC;AAAjC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,cAAD;AACE,QAAA,KAAK,EAAC,WADR;AAEE,QAAA,OAAO,EAAE,MAAM,KAAKC,qBAAL,CAA2B,KAA3B;AAFjB;AAAA;AAAA;AAAA;AAAA,cAFF,eAME,QAAC,cAAD;AACE,QAAA,KAAK,EAAC,WADR;AAEE,QAAA,OAAO,EAAE,MAAM,KAAKA,qBAAL,CAA2B,KAA3B;AAFjB;AAAA;AAAA;AAAA;AAAA,cANF,eAUE,QAAC,cAAD;AACE,QAAA,KAAK,EAAC,OADR;AAEE,QAAA,OAAO,EAAE,MAAM,KAAKA,qBAAL,CAA2B,KAA3B,EAAkC,CAAlC;AAFjB;AAAA;AAAA;AAAA;AAAA,cAVF,eAcE,QAAC,cAAD;AACE,QAAA,KAAK,EAAC,YADR;AAEE,QAAA,OAAO,EAAE,MAAM,KAAKA,qBAAL,CAA2B,KAA3B,EAAkC,CAAlC;AAFjB;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAqBD;;AAtD6B,C,CAyDhC;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA,MAAMQ,eAAe,GAAIV,KAAD,IAAW;AACjC;AACA,SAAO;AACLW,IAAAA,GAAG,EAAEX,KAAK,CAACC;AADN,GAAP;AAGD,CALD;;AAOA,MAAMW,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLC,IAAAA,kBAAkB,EAAE,MAAMD,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAE;AAAR,KAAD;AAD7B,GAAP;AAGD,CAJD,C,CAMA;AACA;AACA;;;AACA,eAAejB,OAAO,CAACY,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cb,OAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\n\nimport CounterControl from \"../../components/CounterControl/CounterControl\";\nimport CounterOutput from \"../../components/CounterOutput/CounterOutput\";\n\n//!use react-redux to create the subscription\nimport { connect } from \"react-redux\";\n//? connect is not really a higher order component, it's a function which returns a higher order component that we use on the export,\n\nclass Counter extends Component {\n  state = {\n    counter: 0,\n  };\n\n  counterChangedHandler = (action, value) => {\n    switch (action) {\n      case \"inc\":\n        this.setState((prevState) => {\n          return { counter: prevState.counter + 1 };\n        });\n        break;\n      case \"dec\":\n        this.setState((prevState) => {\n          return { counter: prevState.counter - 1 };\n        });\n        break;\n      case \"add\":\n        this.setState((prevState) => {\n          return { counter: prevState.counter + value };\n        });\n        break;\n      case \"sub\":\n        this.setState((prevState) => {\n          return { counter: prevState.counter - value };\n        });\n        break;\n      default:\n        console.log(`default: ${action}`);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <CounterOutput value={this.state.counter} />\n        <CounterControl\n          label=\"Increment\"\n          clicked={() => this.counterChangedHandler(\"inc\")}\n        />\n        <CounterControl\n          label=\"Decrement\"\n          clicked={() => this.counterChangedHandler(\"dec\")}\n        />\n        <CounterControl\n          label=\"Add 5\"\n          clicked={() => this.counterChangedHandler(\"add\", 5)}\n        />\n        <CounterControl\n          label=\"Subtract 5\"\n          clicked={() => this.counterChangedHandler(\"sub\", 5)}\n        />\n      </div>\n    );\n  }\n}\n\n//to this first function execution, we can pass some configuration for this given container.\n//2 pieces of info:\n//? 1st: Witch state I want to set - Which part of the whole application state is interesting to us - define which slice of the state do I want to get in this container\n//? 2nd: the actions I want to dispatch - which actions do I want to dispatch -\n\n//the state managed redux is not received as state here because state is the thing you change internally from within a component.\n//we don't want to get anything which we can't change internally and props aren't changed internally,\n//* You store instructions about how the state managed by redux should be mapped to props\nconst mapStateToProps = (state) => {\n  //function which expects the state stored in redux as the input and returns a javascript object which is a map of prop names and slices of the state stored in redux.\n  return {\n    ctr: state.counter,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onIncrementCounter: () => dispatch({ type: \"INCREMENT\" }),\n  };\n};\n\n//?connect itself is a function which returns a function which takes then a component as input,\n//connect is not really a higher order component, it's a function which returns a higher order component.\n//! so this doesn't work export default connect(Counter);\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n"]},"metadata":{},"sourceType":"module"}